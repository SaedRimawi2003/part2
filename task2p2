#include <Wire.h>
#include <LiquidCrystal.h>
#include <MPU6050.h>

int motorSpeed;
const int lcdRs = 12, lcdEnable = 11, lcdD4 = 5, lcdD5 = 4, lcdD6 = 13, lcdD7 = 10;
LiquidCrystal lcd(lcdRs, lcdEnable, lcdD4, lcdD5, lcdD6, lcdD7);
const int motorEnablePin = 9;

MPU6050 imuSensor;

#define MOTOR_IN1 5
#define MOTOR_IN2 6

#define ENCODER_PIN_A 2
#define ENCODER_PIN_B 3

volatile int encoderPosition = 0;
const int encoderStepsPerRevolution = 415;
const float stepsPerDegree = encoderStepsPerRevolution / 360.0;

float desiredAngle = 0;
int desiredSteps = 0;

void setup() {
  lcd.begin(16, 2);
  lcd.print("Motor Control");

  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  pinMode(motorEnablePin, OUTPUT);

  pinMode(ENCODER_PIN_A, INPUT_PULLUP);
  pinMode(ENCODER_PIN_B, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENCODER_PIN_A), updateEncoderPosition, CHANGE);

  Wire.begin();
  imuSensor.initialize();
  if (imuSensor.testConnection()) {
    lcd.setCursor(0, 1);
    lcd.print("MPU6050 Ready");
  } else {
    lcd.setCursor(0, 1);
    lcd.print("MPU6050 Error");
    while (true);
  }

  Serial.begin(9600);
}

void loop() {
  int16_t accelX, accelY, accelZ, gyroX, gyroY, gyroZ;
  imuSensor.getMotion6(&accelX, &accelY, &accelZ, &gyroX, &gyroY, &gyroZ);

  float pitchAngle = atan2(accelY, accelZ) * 180 / PI;

  desiredAngle = constrain(pitchAngle, -90, 90);
  desiredSteps = desiredAngle * stepsPerDegree;

  moveToTargetPosition(desiredSteps);

  Serial.print("Pitch: ");
  Serial.print(pitchAngle);
  Serial.print(" | Encoder Pos: ");
  Serial.print(encoderPosition);
  Serial.print(" | Target: ");
  Serial.println(desiredSteps);

  lcd.setCursor(0, 0);
  lcd.print("                ");
  lcd.setCursor(0, 0);
  lcd.print("Pos: ");
  lcd.print(encoderPosition);

  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print("Target: ");
  lcd.print(desiredSteps);

  delay(100);
}

void moveToTargetPosition(int targetPosition) {
  int positionError = targetPosition - encoderPosition;

  int motorSpeed = map(abs(positionError), 0, encoderStepsPerRevolution, 80, 255);
  motorSpeed = constrain(motorSpeed, 50, 255);

  if (abs(positionError) > 6) {
    if (positionError > 0) {
      digitalWrite(MOTOR_IN1, LOW);
      digitalWrite(MOTOR_IN2, HIGH);
      analogWrite(motorEnablePin, motorSpeed);
    } else if (positionError < 0) {
      digitalWrite(MOTOR_IN1, HIGH);
      digitalWrite(MOTOR_IN2, LOW);
      analogWrite(motorEnablePin, motorSpeed);
    }
  } else {
    digitalWrite(MOTOR_IN1, LOW);
    digitalWrite(MOTOR_IN2, LOW);
    analogWrite(motorEnablePin, 0);
  }
}

void updateEncoderPosition() {
  if (digitalRead(ENCODER_PIN_A) == digitalRead(ENCODER_PIN_B)) {
    encoderPosition++;
  } else {
    encoderPosition--;
  }
}
